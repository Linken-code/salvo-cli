use std::sync::OnceLock;

{%- if db_type == "sqlite" %}
use sqlx::SqlitePool;

use crate::config::DbConfig;

pub static SQLX_POOL: OnceLock<SqlitePool> = OnceLock::new();

pub async fn init(config: &DbConfig) {
    let sqlx_pool = SqlitePool::connect(&config.url).await
        .expect("Database connection failed.");
    crate::db::SQLX_POOL
        .set(sqlx_pool)
        .expect("sqlx pool should be set")
}

pub fn pool() -> &'static SqlitePool {
    SQLX_POOL.get().expect("sqlx pool should be set")
}
{%- elsif db_type == "postgres" %}
use sqlx::postgres::PgPool;

use crate::config::DbConfig;

pub static SQLX_POOL: OnceLock<PgPool> = OnceLock::new();

pub async fn init(config: &DbConfig) {
    let sqlx_pool = PgPool::connect(&config.url).await
        .expect("Database connection failed.");
    crate::db::SQLX_POOL
        .set(sqlx_pool)
        .expect("sqlx pool should be set")
}

pub fn pool() -> &'static PgPool {
    SQLX_POOL.get().expect("sqlx pool should be set")
}
{%- elsif db_type == "mysql" %}
use sqlx::mysql::MySqlPool;

use crate::config::DbConfig;

pub static SQLX_POOL: OnceLock<MySqlPool> = OnceLock::new();

pub async fn init(config: &DbConfig) {
    let sqlx_pool = SqlitePool::connect(&config.url).await
        .expect("Database connection failed.");
    crate::db::SQLX_POOL
        .set(sqlx_pool)
        .expect("sqlx pool should be set")
    }

pub fn pool() -> &'static MySqlPool {
    SQLX_POOL.get().expect("sqlx pool should be set")
}
{%- endif %}


use std::sync::OnceLock;

use diesel::r2d2::{self, CustomizeConnection};
use diesel_migrations::{embed_migrations, EmbeddedMigrations, MigrationHarness};

use crate::config::DbConfig;

{%- if db_type == "postgres" %}
use diesel::{PgConnection, RunQueryDsl};
{%- elsif db_type == "mysql" %}
use diesel::{MysqlConnection, RunQueryDsl};
{%- elsif db_type == "sqlite" %}
use diesel::{SqliteConnection, RunQueryDsl};
{%- endif %}
use url::Url;

pub mod pool;
pub use pool::{DieselPool, DbPooledConnection, PoolError};

pub static DIESEL_POOL: OnceLock<DieselPool> = OnceLock::new();
pub const MIGRATIONS: EmbeddedMigrations = embed_migrations!();

pub fn migrate() {
    let conn = &mut connect().expect("db connect should worked");
    println!(
        "Has pending migration: {}",
        conn.has_pending_migration(MIGRATIONS).unwrap()
    );
    conn.run_pending_migrations(MIGRATIONS)
        .expect("migrate db should worked");
}
pub fn connect() -> Result<DbPooledConnection, PoolError> {
    match DIESEL_POOL.get().expect("diesel pool should set").get() {
        Ok(conn) => Ok(conn),
        Err(e) => {
            println!("db connect error {e}");
            Err(e)
        }
    }
}

pub fn connection_url(config: &DbConfig, url: &str) -> String {
    let mut url = Url::parse(url).expect("Invalid database URL");

    if config.enforce_tls {
        maybe_append_url_param(&mut url, "sslmode", "require");
    }

    // Configure the time it takes for diesel to return an error when there is full packet loss
    // between the application and the database.
    maybe_append_url_param(
        &mut url,
        "tcp_user_timeout",
        &config.tcp_timeout.to_string(),
    );

    url.into()
}

fn maybe_append_url_param(url: &mut Url, key: &str, value: &str) {
    if !url.query_pairs().any(|(k, _)| k == key) {
        url.query_pairs_mut().append_pair(key, value);
    }
}

#[derive(Debug, Clone, Copy)]
pub struct ConnectionConfig {
    pub statement_timeout: u64,
    // pub read_only: bool,
}

impl CustomizeConnection<{%- if db_type == "postgres" -%}
    PgConnection
    {%- elsif db_type == "mysql" -%}
    MysqlConnection
    {%- elsif db_type == "sqlite" -%}
    SqliteConnection
    {%- endif -%}, r2d2::Error> for ConnectionConfig {
    fn on_acquire(&self, conn: &mut {% if db_type == "postgres" -%}
        PgConnection
        {%- elsif db_type == "mysql" -%}
        MysqlConnection
        {%- elsif db_type == "sqlite" -%}
        SqliteConnection
        {%- endif -%}) -> Result<(), r2d2::Error> {
        use diesel::sql_query;

        sql_query(format!(
            "SET statement_timeout = {}",
            self.statement_timeout
        ))
        .execute(conn)
        .map_err(r2d2::Error::QueryError)?;
        Ok(())
    }
}

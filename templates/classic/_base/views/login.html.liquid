<!DOCTYPE html>
<html lang="{{lang}}">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Salvo Demo</title>
  </head>
  <body id="body" class="bg-gradient-to-br from-blue-400 via-teal-400 to-green-500 min-h-screen">
    <div x-data="loginForm()">
      <template x-if="!isLoggedIn">
        <div class="flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
          <div class="w-full max-w-md space-y-6 bg-white bg-opacity-80 p-10 rounded-3xl shadow-xl border border-blue-200">
            <div>
              <h2 class="text-center text-4xl font-extrabold tracking-tight text-blue-900">
                {{login}}
              </h2>
              <p class="mt-2 text-center text-sm text-gray-600">
                {{salvo_cli_welcome}}
              </p>
            </div>
            <form class="mt-8 space-y-6" @submit.prevent="submit">
              <input type="hidden" name="remember" value="true" />
              <div class="space-y-4">
                <div>
                  <label for="username" class="block text-sm font-medium text-gray-700 mb-1">{{username}}</label>
                  <input
                    x-model="username"
                    id="username"
                    name="username"
                    type="text"
                    autocomplete="username"
                    required
                    class="block w-full appearance-none rounded-lg border border-gray-300 px-4 py-3 text-gray-900 placeholder-gray-400 focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-300 sm:text-sm transition"
                    placeholder="{{username}}"
                  />
                </div>
                <div>
                  <label for="password" class="block text-sm font-medium text-gray-700 mb-1">{{password}}</label>
                  <input
                    x-model="password"
                    id="password"
                    name="password"
                    type="password"
                    autocomplete="current-password"
                    required
                    class="block w-full appearance-none rounded-lg border border-gray-300 px-4 py-3 text-gray-900 placeholder-gray-400 focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-300 sm:text-sm transition"
                    placeholder="{{password}}"
                  />
                </div>
              </div>
              
              <div>
                <button
                  type="submit"
                  class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
                >
                  {{login}}
                </button>
              </div>
            </form>
            <div class="text-center text-xs text-gray-500 mt-6">
              <p>{{account}}: zhangsan</p>
              <p>{{password}}: 123</p>
            </div>
          </div>
        </div>
      </template>
      <template x-if="isLoggedIn">
        <div x-html="userList"></div>
      </template>
    </div>
  </body>
  <script src="assets/js/tailwindcss.js" defer></script>
  <script src="assets/js/sweetalert2.js" defer></script>
  <script src="assets/js/alpinejs.js" defer></script>
  <script>
    function loginForm() {
      return {
        username: "",
        password: "",
        isLoggedIn: false,
        userList: "",
        async submit() {
          try {
            const response = await fetch("/api/login", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "accept": "application/json",
              },
              body: JSON.stringify({
                username: this.username,
                password: this.password,
              }),
            });
            if (!response.ok) {
              const data = await response.json();
              throw new Error(`${data.error.brief}`);
            }
            this.isLoggedIn = true;
            const userListResponse = await fetch("/users", {
              headers: {
                "X-Fragment-Header": "true",
              },
            });
            this.userList = await userListResponse.text();
            history.pushState(null, '', '/users');
          } catch (error) {
            Swal.fire({
              title: "Error!",
              text: error.message,
              icon: "error",
              confirmButtonText: "OK",
            });
          }
        },
      };
    }
    function userForm() {
      return {
        users: [],
        total: 0,
        currentPage: 1,
        pageSize: 10,
        searchUsername: '',
        fetchData() {
          const params = new URLSearchParams({
            page: this.currentPage,
            size: this.pageSize,
            username: this.searchUsername
          });
          fetch(`/api/users?${params.toString()}`)
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json();
            })
            .then((data) => {
              this.users = data.data;
              this.total = data.total;
            })
            .catch((error) => {
              console.error(
                "There has been a problem with your fetch operation:",
                error
              );
            });
        },
        search() {
          this.currentPage = 1;
          this.fetchData();
        },
        prevPage() {
          if (this.currentPage > 1) {
            this.currentPage--;
            this.fetchData();
          }
        },
        nextPage() {
          if (this.currentPage < Math.ceil(this.total / this.pageSize)) {
            this.currentPage++;
            this.fetchData();
          }
        },
        addUser() {
          Swal.fire({
            title: "{{add_user}}",
            showCancelButton: true,
            confirmButtonText: "{{yes}}",
            cancelButtonText: "{{cancel}}",
            html: `
    <input id="swal-input1" class="swal2-input" placeholder="{{username}}">
    <input id="swal-input2" class="swal2-input" placeholder="{{password}}" type="password">
    `,
            preConfirm: () => {
              return fetch("/api/users", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  username: document.getElementById("swal-input1").value,
                  password: document.getElementById("swal-input2").value,
                }),
              })
                .then((response) => {
                  if (!response.ok) {
                    throw new Error(response.statusText);
                  }
                  this.fetchData();
                  return;
                })
                .catch((error) => {
                  Swal.showValidationMessage(`Request failed: ${error}`);
                });
            },
            allowOutsideClick: () => !Swal.isLoading(),
          });
        },
        updateUser(id, currentUsername) {
          Swal.fire({
            title: "{{update}}",
            showCancelButton: true,
            confirmButtonText: "{{yes}}",
            cancelButtonText: "{{cancel}}",
            html: `
    <input id="swal-input1" class="swal2-input" placeholder="{{username}}" value="${currentUsername}">
    <input id="swal-input2" class="swal2-input" placeholder="{{password}}" type="password">
    `,
            preConfirm: () => {
              return fetch(`/api/users/${id}`, {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  username: document.getElementById("swal-input1").value,
                  password: document.getElementById("swal-input2").value,
                }),
              })
                .then((response) => {
                  if (!response.ok) {
                    throw new Error(response.statusText);
                  }
                  this.fetchData();
                  return;
                })
                .catch((error) => {
                  Swal.showValidationMessage(`Request failed: ${error}`);
                });
            },
            allowOutsideClick: () => !Swal.isLoading(),
          });
        },
        deleteUser(id) {
          Swal.fire({
            title: "{{are_you_sure_you_want_to_delete}}",
            text: "{{you_wont_be_able_to_revert_this}}",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "{{yes}}",
            cancelButtonText: "{{cancel}}",
            preConfirm: () => {
              return fetch(`/api/users/${id}`, {
                method: "DELETE",
              })
                .then((response) => {
                  if (!response.ok) {
                    throw new Error(response.statusText);
                  }
                  this.fetchData();
                  return;
                })
                .catch((error) => {
                  Swal.showValidationMessage(`Request failed: ${error}`);
                });
            },
            allowOutsideClick: () => !Swal.isLoading(),
          });
        },
      };
    }

  </script>
</html>

{%- if db_lib == "diesel" %}
{%- if db_type == "sqlite" %}
{%- else %}
use std::time::Duration;
use diesel::r2d2;
use std::sync::Arc;
use scheduled_thread_pool::ScheduledThreadPool;
{%- endif %}
{%- endif %}
{%- if db_lib == "sqlx" %}
use sqlx::SqlitePool;
{%- endif %}
use dotenvy::dotenv;
use figment::providers::{Env, Format, Toml};
use figment::Figment;
use salvo::catcher::Catcher;
use salvo::conn::rustls::{Keycert, RustlsConfig};
use salvo::prelude::*;
use salvo::server::ServerHandle;
use serde::Serialize;
use tokio::signal;
use tracing::info;

mod config;
use config::ServerConfig;
mod db;
mod models;
mod utils;
{%- if db_lib == "diesel" %}
mod schema;
{%- elsif db_lib == "seaorm" %}
mod entities;
{%- endif %}
mod hoops;
mod routers;

mod error;
pub use error::AppError;

pub type AppResult<T> = Result<T, AppError>;
pub type JsonResult<T> = Result<Json<T>, AppError>;
pub type EmptyResult = Result<Json<Empty>, AppError>;

pub fn json_ok<T>(data: T) -> JsonResult<T> {
    Ok(Json(data))
}
#[derive(Serialize, ToSchema, Clone, Copy, Debug)]
pub struct Empty {}
pub fn empty_ok() -> JsonResult<Empty> {
    Ok(Json(Empty {}))
}

#[tokio::main]
async fn main() {
    if let Err(e) = dotenv() {
        println!("dotenv error: {:?}", e);
    }

    crate::config::init();
    let config = crate::config::get();
    
    {%- if db_lib == "diesel" %}
    {%- if db_type == "sqlite" %}
    {%- else %}
    let db_config = r2d2::Pool::builder()
    .max_size(config.db.pool_size)
    .min_idle(config.db.min_idle)
    .connection_timeout(Duration::from_millis(config.db.connection_timeout));

    let db_primary = db::DieselPool::new(&config.db.url, &config.db, db_config).expect("diesel pool should be created");
    let thread_pool = Arc::new(ScheduledThreadPool::new(config.db.helper_threads));
    let db_primary = {
        let db_connection_config = db::ConnectionConfig {
            statement_timeout: config.db.statement_timeout,
        };

        let db_config = r2d2::Pool::builder()
            .max_size(config.db.pool_size)
            .min_idle(config.db.min_idle)
            .connection_timeout(Duration::from_millis(config.db.connection_timeout))
            .connection_customizer(Box::new(db_connection_config))
            .thread_pool(thread_pool);

        db::DieselPool::new(&config.db.url, &config.db, db_config).expect("diesel pool should be created")
    };
    crate::db::DIESEL_POOL
    .set(db_primary)
    .expect("diesel pool should be set");
    crate::db::migrate();
    {%- endif %}

    {%- elsif db_lib == "sqlx" %}
    let sqlx_pool = SqlitePool::connect(&config::get().db.url)
        .await
        .expect("Database connection failed.");
    crate::db::SQLX_POOL
        .set(sqlx_pool)
        .expect("diesel pool should be set");
    {%- endif %}

    let _guard = config.log.guard();
    tracing::info!("log level: {}", &config.log.filter_level);

    let service = Service::new(routers::root())
        .catcher(Catcher::default().hoop(hoops::error_404))
        .hoop(hoops::cors_hoop());
    println!("ðŸ”„ {{listen_on}} {}", &config.listen_addr);
    if let Some(tls) = &config.tls {
        let listen_addr = &config.listen_addr;
        println!(
            "ðŸ“– Open API Page: https://{}/scalar",
            listen_addr.replace("0.0.0.0", "127.0.0.1")
        );
        println!(
            "ðŸ”‘ Login Page: https://{}/login",
            listen_addr.replace("0.0.0.0", "127.0.0.1")
        );
        let config = RustlsConfig::new(Keycert::new().cert(tls.cert.clone()).key(tls.key.clone()));
        let acceptor = TcpListener::new(listen_addr).rustls(config).bind().await;
        let server = Server::new(acceptor);
        tokio::spawn(shutdown_signal(server.handle()));
        server.serve(service).await;
    } else {
        println!(
            "ðŸ“– {{open_api_page}}: http://{}/scalar",
            config.listen_addr.replace("0.0.0.0", "127.0.0.1")
        );
        println!(
            "ðŸ”‘ Login Page: http://{}/login",
            config.listen_addr.replace("0.0.0.0", "127.0.0.1")
        );
        let acceptor = TcpListener::new(&config.listen_addr).bind().await;
        let server = Server::new(acceptor);
        tokio::spawn(shutdown_signal(server.handle()));
        server.serve(service).await;
    }
}

async fn shutdown_signal(handle: ServerHandle) {
    let ctrl_c = async {
        signal::ctrl_c()
            .await
            .expect("failed to install Ctrl+C handler");
    };

    #[cfg(unix)]
    let terminate = async {
        signal::unix::signal(signal::unix::SignalKind::terminate())
            .expect("failed to install signal handler")
            .recv()
            .await;
    };

    #[cfg(not(unix))]
    let terminate = std::future::pending::<()>();

    tokio::select! {
        _ = ctrl_c => info!("ctrl_c signal received"),
        _ = terminate => info!("terminate signal received"),
    }
    handle.stop_graceful(std::time::Duration::from_secs(60));
}

#[cfg(test)]
mod tests {
    use salvo::prelude::*;
    use salvo::test::{ResponseExt, TestClient};

    use crate::config;

    #[tokio::test]
    async fn test_hello_world() {
        let service = Service::new(super::router());

        let content = TestClient::get(format!(
            "http://{}",
            &config::get().address.replace("0.0.0.0", "127.0.0.1")
        ))
        .send(&service)
        .await
        .take_string()
        .await
        .unwrap();
        assert_eq!(content, "Hello World from salvo");
    }
}

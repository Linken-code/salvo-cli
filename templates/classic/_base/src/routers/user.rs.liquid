use serde::{Deserialize, Serialize};

use askama::Template;
use salvo::prelude::*;
use validator::Validate;

use crate::hoops::jwt::decode_token;
use crate::{empty_ok, json_ok, AppResult, JsonResult};

#[derive(Template)]
#[template(path = "views/user_list_page.html")]
pub struct UserListPageTemplate {}

#[derive(Template)]
#[template(path = "views/user_list.html")]
pub struct UserListTemplate {}

#[handler]
pub async fn list_page(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let is_fragment = req.headers().get("X-Fragment-Header");
    match is_fragment {
        Some(_) => {
            let hello_tmpl = UserListTemplate {};
            res.render(Text::Html(hello_tmpl.render().unwrap()));
        }
        None => {
            let hello_tmpl = UserListPageTemplate {};
            res.render(Text::Html(hello_tmpl.render().unwrap()));
        }
    }
    Ok(())
}

#[derive(Deserialize, Debug, Validate, ToSchema, Default)]
pub struct UserAddRequest {
    #[validate(length(min = 5, message = "username length must be greater than 5"))]
    pub username: String,
    pub password: String,
}

#[derive(Debug, Deserialize, ToSchema, Default)]
pub struct UserLoginRequest {
    pub username: String,
    pub password: String,
}

#[derive(Debug, Deserialize, Extractible, ToSchema, Default)]
#[salvo(extract(default_source(from = "body", parse = "json")))]
pub struct UserUpdateRequest {
    #[salvo(extract(source(from = "param")))]
    pub id: String,
    pub username: String,
    pub password: String,
}


#[derive(Debug, Serialize, ToSchema, Default)]
pub struct UserResponse {
    pub id: String,
    pub username: String,
}


#[endpoint(tags("users"))]
pub async fn create_user(new_user: JsonBody<UserAddRequest>) -> JsonResult<User> {
    let user = user::add_user(new_user.0).await?;
    json_ok(user)
}

#[endpoint(tags("users"),
parameters(
    ("id", description = "user id"),
))]
pub async fn update_user(user_id: PathParam<i64>) -> AppResult<JsonResult<UserResponse>> {
    let req: UserUpdateRequest = req.extract().await?;
    let result = user::update_user(req).await;
    json_ok(result)
}

#[endpoint(tags("users"))]
pub async fn delete_user(id: PathParam<String>) -> JsonResult<()> {
    let result = user::delete_user(id.0).await;
    JsonResult(result)
}

#[endpoint(tags("users"))]
pub async fn list_users() -> JsonResult<Vec<UserResponse>> {
    let result = user::users().await;
    JsonResult(result)
}

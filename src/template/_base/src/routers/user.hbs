{{#if is_web_site}}
use crate::{JsonResult, AppResult, json_ok, json_empty};
use crate::{
    dtos::user::{
        UserAddRequest, UserLoginRequest, UserLoginResponse, UserResponse, UserUpdateRequest,
    },
    middleware::jwt::decode_token,
    services::user,
};
use askama::Template;
use salvo::{
    oapi::endpoint,
    http::cookie::Cookie,
    oapi::extract::{JsonBody, PathParam},
    writing::{Redirect, Text},
    Request, Response,
};
use salvo::Writer;

#[derive(Template)]
#[template(path = "user_list_page.html")]
pub struct UserListPageTemplate {}

#[derive(Template)]
#[template(path = "user_list.html")]
pub struct UserListTemplate {}

#[endpoint]
pub async fn user_list_page(req: &mut Request, res: &mut Response) -> AppResult<()> {
    let is_fragment = req.headers().get("X-Fragment-Header");
    match is_fragment {
        Some(_) => {
            let hello_tmpl = UserListTemplate {};
            res.render(Text::Html(hello_tmpl.render().unwrap()));
        }
        None => {
            let hello_tmpl = UserListPageTemplate {};
            res.render(Text::Html(hello_tmpl.render().unwrap()));
        }
    }
    Ok(())
}

#[endpoint(tags("users"))]
pub async fn post_add_user(new_user: JsonBody<UserAddRequest>) -> JsonResult<User> {
    let user = user::add_user(new_user.0).await?;
    json_ok(user)
}

#[endpoint(  tags("users"),
parameters(
    ("id", description = "user id"),
))]
pub async fn put_update_user(req: &mut Request) -> AppResult<JsonResult<UserResponse>> {
    let req: UserUpdateRequest = req.extract().await?;
    let result = user::update_user(req).await;
    json_ok(result)
}

#[endpoint(tags("users"))]
pub async fn delete_user(id: PathParam<String>) -> JsonResult<()> {
    let result = user::delete_user(id.0).await;
    JsonResult(result)
}

#[endpoint(tags("users"))]
pub async fn get_users() -> JsonResult<Vec<UserResponse>> {
    let result = user::users().await;
    JsonResult(result)
}

{{else}}
use crate::{
    JsonResult, AppResult,
    dtos::user::{
        UserAddRequest, UserLoginRequest, UserLoginResponse, UserResponse, UserUpdateRequest,
    },
    services::user,
};
use salvo::{
    oapi::endpoint,
    http::cookie::Cookie,
    oapi::extract::{JsonBody, PathParam},
    Request, Response,
};


#[endpoint(tags("users"))]
pub async fn post_add_user(new_user: JsonBody<UserAddRequest>) -> JsonResult<UserResponse> {
    let result = user::add_user(new_user.0).await;
    JsonResult(result)
}

#[endpoint(  tags("users"),
parameters(
    ("id", description = "user id"),
))]
pub async fn put_update_user(req: &mut Request) -> JsonResult<UserResponse> {
    let req: UserUpdateRequest = req.extract().await?;
    let result = user::update_user(req).await;
    Ok(JsonResult(result))
}

#[endpoint(tags("users"))]
pub async fn delete_user(id: PathParam<String>) -> JsonResult<()> {
    let result = user::delete_user(id.0).await;
    AppResult(result)
}

#[endpoint(tags("users"))]
pub async fn get_users() -> JsonResult<Vec<UserResponse>> {
    let result = user::users().await;
    JsonResult(result)
}
{{/if}}

use salvo::http::ParseError;
{{#if is_mongodb}}
use mongodb::bson::document::ValueAccessError as MongoBsonAccessError;
use mongodb::bson::oid::Error as MongoBsonOidError;
use mongodb::error::Error as MongoDbError;
{% endif %}
use thiserror::Error;

#[derive(Error, Debug)]
pub enum AppError {
    #[error("error:`{0}`")]
    AnyHow(#[from] anyhow::Error),
    #[error("http::ParseError:`{0}`")]
    ParseError(#[from] ParseError),
    {{#if is_sqlx}}
    #[error("sqlx::Error:`{0}`")]
    SqlxError(#[from] sqlx::Error),
    {% endif %}
    {{#if is_seaorm}}
    #[error("seaorm::DbErr:Error:`{0}`")]
    DbErr(#[from] seaorm::DbErr),
    {% endif %}
    {{#if is_diesel}}
    #[error("diesel::result::Error:`{0}`")]
    DieselErr(#[from] diesel::result::Error),
    {% endif %}
    {{#if is_rbatis}}
    #[error("rbatis::Error:`{0}`")]
    RbatisErr(#[from] rbatis::Error),
    {% endif %}
    {{#if is_mongodb}}
    #[error("mongodb::error::Error:`{0}`")]
    MongoDbErr(#[from] MongoDbError),
    #[error("mongodb::bson::document::ValueAccessError:`{0}`")]
    MongoBsonAccessError(#[from] MongoBsonAccessError),
    #[error("mongodb::bson::oid::Error`{0}`")]
    MongoBsonOidError(#[from] MongoBsonOidError),
    {% endif %}
    {{#if need_db_conn}}
    #[error("ValidationError:`{0}`")]
    ValidationError(#[from] validator::ValidationErrors),
    {% endif %}
}

impl EndpointOutRegister for AppError {
    fn register(_components: &mut salvo::oapi::Components, operation: &mut salvo::oapi::Operation) {
        operation.responses.insert(
            StatusCode::INTERNAL_SERVER_ERROR.as_str(),
            oapi::Response::new("Internal server error").add_content("application/json", StatusError::to_schema(components)),
        );
        operation.responses.insert(
            StatusCode::NOT_FOUND.as_str(),
            oapi::Response::new("Not found").add_content("application/json", StatusError::to_schema(components)),
        );
        operation.responses.insert(
            StatusCode::BAD_REQUEST.as_str(),
            oapi::Response::new("Bad request").add_content("application/json", StatusError::to_schema(components)),
        );
    }
}
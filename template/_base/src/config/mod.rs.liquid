use once_cell::sync::Lazy;
use serde::Deserialize;
use std::{fs::File, io::Read, path::Path};


pub static CONFIG: OnceLock<ServerConfig> = OnceLock::new();

#[derive(Clone, Debug, Deserialize)]
pub struct ServerConfig {
    pub tls: Option<TlsConfig>,

    #[serde(default = "default_listen_addr")]
    pub listen_addr: String,
    pub jwt_secret: Option<String>,

    pub db: DbConfig,
    pub log: LogConfig,
}

#[derive(Clone, Debug, Default)]
pub struct AllowedOrigins(Vec<String>);
impl AllowedOrigins {
    pub fn from_env() -> anyhow::Result<Self> {
        let allowed_origins = required_var("WEB_ALLOWED_ORIGINS")?
            .split(',')
            .map(ToString::to_string)
            .collect();

        Ok(Self(allowed_origins))
    }

    pub fn contains(&self, value: &HeaderValue) -> bool {
        self.0.iter().any(|it| it == value)
    }
}

#[derive(Clone, Debug, Deserialize)]
pub struct TlsConfig {
    pub cert: String,
    pub key: String,
    
    pub auto_acme: Option<String>,
}
fn default_db_pool_size() -> u32 {
    10
}
fn default_tcp_timeout() -> u64 {
    10000
}
fn default_connection_timeout() -> u64 {
    30000
}
fn default_statement_timeout() -> u64 {
    30000
}
fn default_helper_threads() -> usize {
    10
}

pub fn default_true() -> bool {
    true
}
pub fn default_false() -> bool {
    false
}

#[derive(Debug, Deserialize)]
pub struct Jwt {
    pub jwt_secret: String,
    pub jwt_exp: i64,
}

#[derive(Debug, Deserialize)]
pub struct Cert {
    /// cert
    pub cert: String,
    /// key
    pub key: String,
}

pub struct CertKey {
    pub cert: Vec<u8>,
    pub key: Vec<u8>,
}

impl CertKey {
    pub fn new(cert: Vec<u8>, key: Vec<u8>) -> Self {
        Self { cert, key }
    }
}
fn get_cert_key() -> CertKey {
    let cert = get_string(&CFG.cert.cert);
    let key = get_string(&CFG.cert.key);
    CertKey::new(cert, key)
}

fn get_string<P: AsRef<Path>>(path: P) -> Vec<u8> {
    std::fs::read(path).expect("{{config_error_read_failed}}")
}


fn default_listen_addr() -> String {
    "127.0.0.1:8008".into()
}